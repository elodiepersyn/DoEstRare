{
    "contents" : "#include \"functions.h\"\n\n\n//---------permutate a vector\nvoid permutate(double* vect, double* vect_perm, int size){\n  double random=0;\n  int round_random=0;\n\n  int i=0;\n  int j=0;\n  int ind;\n  int count=0;\n\n  double* indice=malloc(size*sizeof(double));\n\n  for(i=0; i<size; i++){\n    indice[i]=i;\n  }\n\n  for(i=0; i<size; i++){\n    random=runif(-0.5,(size-1-i)+0.5);\n    round_random=round(random);\n\n    ind=indice[round_random];\n    vect_perm[i]=vect[ind];\n\n    //update indices\n    if(round_random!=(size-1-i)){\n\n      for(j=round_random; j<(size-1-i); j++){\n        indice[j]=indice[j+1];\n      }\n    }\n  }\n\n  free(indice);\n}\n\nvoid densite(double* l, double* w, int from, int to, int P, double  bw, double* dens){\n  int pos=0;\n  int j=0;\n  initialize(dens, (to-from+1));\n  for(pos=from; pos<=to; pos++){\n    dens[(pos-1)]=0;\n    for(j=0;j<P; j++){\n      dens[(pos-1)]=dens[(pos-1)]+w[j]*GaussianKernel((double)(pos-l[j])/bw)/bw;\n    }\n  }\n}\n\ndouble GaussianKernel(double u){\n  double k;\n  k=1/sqrt(2*pi)*exp(-0.5*u*u);\n  return k;\n}\n\nvoid initialize(double* vect, int size){\n  int i=0;\n  for(i=0; i<size; i++){\n    vect[i]=0;\n  }\n}\n\nvoid proport(double* prop, double* vect, int size){\n  initialize(prop, size);\n  int i=0;\n  for(i=0; i<size; i++){\n    prop[i]=vect[i]/sum(vect,size);\n  }\n}\n\ndouble sum(double* vect, int size){\n  int i=0;\n  double somme=0;\n  for(i=0; i<size; i++){\n    somme=somme+vect[i];\n  }\n  return somme;\n}\n\n\n//------------create a matrix from a vector\nvoid createMatrixFromRVector(double** M, double* v, int n_ind, int n_col){\n  int i=0;\n  int j=0;\n  for(i=0; i<n_ind; i++){\n    for(j=0; j<n_col; j++){\n      M[i][j]=v[n_ind*j+i];\n    }\n  }\n}\n\n\nvoid colSum_ctrl(double* colsum_vect, double**M, double* Y, int N, int P){\n  initialize(colsum_vect, P);\n  int i=0;\n  int j=0;\n  for(i=0; i<N; i++){\n    for(j=0; j<P; j++){\n      if(Y[i]==0){\n        colsum_vect[j]=colsum_vect[j]+M[i][j];\n      }\n    }\n  }\n}\n\nvoid colSum_case(double* colsum_vect, double**M, double* Y, int N, int P){\n  initialize(colsum_vect, P);\n  int i=0;\n  int j=0;\n  for(i=0; i<N; i++){\n    for(j=0; j<P; j++){\n      if(Y[i]==1){\n        colsum_vect[j]=colsum_vect[j]+M[i][j];\n      }\n    }\n  }\n}\n",
    "created" : 1490017840050.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "400326715",
    "id" : "A7300C61",
    "lastKnownWriteTime" : 1489765908,
    "path" : "~/elodie/PACKAGE_R/DOESTRARE_PROPRE/DoEstRare1.5/src/functions.c",
    "project_path" : "src/functions.c",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "c"
}